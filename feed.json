{
    "version": "https://jsonfeed.org/version/1",
    "title": "Bohua xu",
    "home_page_url": "https://antfu.me/",
    "feed_url": "https://antfu.me/feed.json",
    "description": "bohua xu' Blog",
    "icon": "https://s1.imgbed.xyz/2022/09/23/kSyVq.png",
    "author": {
        "name": "Bohua Xu",
        "url": "https://xubh.top"
    },
    "items": [
        {
            "content_html": "<p>[[toc]]</p>\n<h1>Simple 3D Dice Rolling</h1>\n<h2>Demo</h2>\n<p>🎮 <a href=\"https://rolldice.xubh.top/\">Try it online</a></p>\n<h2>User Guide</h2>\n<h3>Initial Interface</h3>\n<img src=\"https://telegraph-image-92x.pages.dev/file/08163f21ab28281d01b79-07d32073bcaa151655.png\" alt=\"Initial Interface\" style=\"max-width: 60%; display: block; margin: 20px auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\" />\n<h3>Basic Operations</h3>\n<ul>\n<li>Click any dice to start rolling</li>\n</ul>\n<h3>Hidden Features</h3>\n<ol>\n<li><strong>Cheat Mode</strong>\n<ul>\n<li>Double-click in the lower-left corner area to activate the cheat system</li>\n<li>A dice control panel will appear after activation</li>\n<li>Click &quot;Reset Dice&quot; button to stack dice neatly</li>\n</ul>\n</li>\n</ol>\n<img src=\"https://telegraph-image-92x.pages.dev/file/57e209add3d43671a5820-6ac6ed7c10073051e3.png\" alt=\"Cheat Mode Panel\" style=\"max-width: 60%; display: block; margin: 20px auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\" />\n<ol start=\"2\">\n<li><strong>Dice Control Panel</strong>\n<ul>\n<li>Allows individual adjustment of each die's value</li>\n<li>Provides real-time preview of modifications</li>\n</ul>\n</li>\n</ol>\n<h3>Dice States</h3>\n<p><strong>Reset State</strong><br>\n<img src=\"https://telegraph-image-92x.pages.dev/file/9b2d90ebe286fbe20f656-569a066a3832d7e242.png\" alt=\"After Throw\" style=\"max-width: 60%; display: block; margin: 20px auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\" /></p>\n<p><strong>After Throw</strong><br>\n<img src=\"https://telegraph-image-92x.pages.dev/file/13dd52115634b7a21fd12-72d77ee142b401b447.png\" alt=\"Reset State\" style=\"max-width: 60%; display: block; margin: 20px auto; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);\" /></p>\n<h2>Core Functionality Implementation</h2>\n<h3>1. Physics Engine Integration</h3>\n<p>Using <code>@react-three/cannon</code> for realistic physics effects:</p>\n<pre><code class=\"language-typescript\">const [ref, api] = useBox(() =&gt; ({\n  mass: 1,\n  position,\n  args: [1.5, 1.5, 1.5],\n  linearDamping: 0.4,\n  angularDamping: 0.3,\n  material: {\n    friction: 0.3,\n    restitution: 0.6,\n  }\n}))\n</code></pre>\n<ul>\n<li><code>mass</code>: Sets the dice mass</li>\n<li><code>linearDamping</code>: Controls linear motion damping</li>\n<li><code>angularDamping</code>: Controls rotational damping</li>\n<li><code>friction</code>: Friction coefficient</li>\n<li><code>restitution</code>: Elasticity coefficient</li>\n</ul>\n<h3>2. State Management</h3>\n<p>Using Zustand for dice state management:</p>\n<pre><code class=\"language-typescript\">const useDiceStore = create&lt;DiceState&gt;((set, get) =&gt; ({\n  diceCount: 5,\n  diceValues: Array(6).fill(1),\n  diceRefs: new Set(),\n  \n  throwAllDice: () =&gt; {\n    const { diceRefs } = get()\n    diceRefs.forEach(api =&gt; {\n      // Random throw force and direction\n      const maxVelocity = 12 + Math.random() * 6\n      const height = 15 + Math.random() * 8\n      // ...\n    })\n  }\n}))\n</code></pre>\n<h3>3. Dice Material Rendering</h3>\n<h4>3.1 Texture Generation</h4>\n<p>Using Canvas to dynamically generate dice face textures:</p>\n<pre><code class=\"language-typescript\">export function createDiceTexture(number: number): THREE.Texture {\n  const canvas = document.createElement('canvas')\n  const context = canvas.getContext('2d')\n  // Draw background and dots\n  const dotPositions = getDotPositions(number)\n  dotPositions.forEach(([x, y]) =&gt; {\n    context.arc(x, y, dotRadius, 0, Math.PI * 2)\n  })\n  return new THREE.CanvasTexture(canvas)\n}\n</code></pre>\n<h4>3.2 Material Application</h4>\n<pre><code class=\"language-typescript\">const Dice: React.FC&lt;DiceProps&gt; = () =&gt; {\n  const textures = useRef([\n    createDiceTexture(6),\n    createDiceTexture(5),\n    createDiceTexture(2),\n    createDiceTexture(1),\n    createDiceTexture(4),\n    createDiceTexture(3),\n  ])\n\n  return (\n    &lt;Box args={[1.45, 1.45, 1.45]} castShadow&gt;\n      {textures.current.map((texture, index) =&gt; (\n        &lt;meshPhysicalMaterial\n          key={index}\n          attach={`material-${index}`}\n          map={texture}\n          metalness={0.3}\n          roughness={0.4}\n          clearcoat={0.5}\n        /&gt;\n      ))}\n    &lt;/Box&gt;\n  )\n}\n</code></pre>\n<ul>\n<li>Using Canvas to dynamically generate textures for each face</li>\n<li>Applying meshPhysicalMaterial for realistic material effects</li>\n<li>Caching textures with useRef to avoid recreation</li>\n</ul>\n<h3>4. Interaction Feedback</h3>\n<p>Combining sound and vibration for feedback:</p>\n<pre><code class=\"language-typescript\">onCollide: (event: any) =&gt; {\n  if (event.body) {\n    vibrate(VIBRATION_PATTERNS.DICE_HIT);\n  }\n}\n</code></pre>\n<h3>5. Smooth Animation</h3>\n<p>Using interpolation for fluid motion:</p>\n<pre><code class=\"language-typescript\">useFrame(() =&gt; {\n  if (!ref.current) return\n  \n  const lerpFactor = 0.1\n  smoothedPosition.current[0] += (currentPosition.x - smoothedPosition.current[0]) * lerpFactor\n  // ...\n})\n</code></pre>\n<h2>Key Technical Points</h2>\n<h3>Collision Detection</h3>\n<pre><code class=\"language-typescript\">useEffect(() =&gt; {\n  const currentPosition = [0, 0, 0]\n  const unsubscribe = api.position.subscribe((v: [number, number, number]) =&gt; {\n    // Detect boundary collisions\n    const maxBound = 9\n    if (Math.abs(v[0]) &gt; maxBound || Math.abs(v[2]) &gt; maxBound) {\n      api.velocity.set(0, 0, 0)\n    }\n  })\n  return () =&gt; unsubscribe()\n}, [api])\n</code></pre>\n<h3>Motion State Monitoring</h3>\n<pre><code class=\"language-typescript\">useEffect(() =&gt; {\n  let isMoving = false;\n  const unsubscribeVelocity = api.velocity.subscribe((v: [number, number, number]) =&gt; {\n    const speed = Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n    if (speed &gt; 0.1 &amp;&amp; !isMoving) {\n      isMoving = true;\n      playDiceRollingSound();\n    } else if (isMoving &amp;&amp; speed &lt; 0.1) {\n      isMoving = false;\n      stopDiceRollingSound();\n    }\n  });\n  return () =&gt; unsubscribeVelocity();\n}, [api])\n</code></pre>\n",
            "url": "https://xubh.top/posts/rolldice",
            "title": "rollDice🎲[1.0]",
            "summary": "rollDice",
            "date_modified": "2024-12-08T08:00:00.000Z",
            "author": {
                "name": "Bohua Xu",
                "url": "https://xubh.top"
            }
        },
        {
            "content_html": "<p>[[toc]]</p>\n<p>Recently,I saw that Sam's company gave up the css-in-js solution.The original text is very good,from the pros to the cons.The start with performance issues to explain why your company had to ditch css-in-js,and finally tell readers that their solution is css-modules.</p>\n<h2>What is CSS-in-JS?</h2>\n<p>As the name suggests, CSS-in-JS allows you to style your React components by writing CSS directly in your JavaScript or TypeScript code:</p>\n<pre><code class=\"language-js\">// @emotion/react (css prop), with object styles\nfunction ErrorMessage({ children }) {\n  return (\n    &lt;div\n      css={{\n        color: 'red',\n        fontWeight: 'bold',\n      }}\n    &gt;\n      {children}\n    &lt;/div&gt;\n  );\n}\n\n// styled-components or @emotion/styled, with string styles\nconst ErrorMessage = styled.div`\n  color: red;\n  font-weight: bold;\n`;\n</code></pre>\n<h2>The Good, The Bad, and the Ugly of CSS-in-JS</h2>\n<p>Before we get into the nitty-gritty of specific CSS-in-JS coding patterns and their implications for performance, let's start with a high-level overview of why you might choose to adopt the technology, and why you might not.</p>\n<h3>The Good</h3>\n<p><strong>1. Locally-scoped styles.</strong> When writing plain CSS, it's very easy to accidentally apply styles more widely than you intended. For example, imagine you're making a list view where each row should have some padding and a border. You'd likely write CSS like this:</p>\n<pre><code>   .row {\n     padding: 0.5rem;\n     border: 1px solid #ddd;\n   }\n</code></pre>\n<p>Several months later when you've completely forgotten about the list view, you create another component that has rows. Naturally, you set <code>className=&quot;row&quot;</code> on these elements. Now the new component's rows have an unsightly border and you have no idea why! While this type of problem can be solved by using longer class names or more specific selectors, it's still on you as the developer to ensure there are no class name conflicts.</p>\n<p>CSS-in-JS completely solves this problem by making styles locally-scoped by default. If you were to write your list view row as</p>\n<pre><code>&lt;div css={{ padding: '0.5rem', border: '1px solid #ddd' }}&gt;...&lt;/div&gt;\n</code></pre>\n<p>there is no way the padding and border can accidentally get applied to unrelated elements.</p>\n<blockquote>\n<p>Note: CSS Modules also provide locally-scoped styles.</p>\n</blockquote>\n<p><strong>2. Colocation.</strong> If using plain CSS, you might put all of your <code>.css</code> files in a <code>src/styles</code> directory, while all of your React components live in <code>src/components</code>. As the size of the application grows, it quickly becomes difficult to tell which styles are used by each component. Often times, you will end up with dead code in your CSS because there's no easy way to tell that the styles aren't being used.</p>\n<p>A better approach for organizing your code is to <strong>include everything related to a single component in same place.</strong> This practice, called colocation, has been covered in an <a href=\"https://kentcdodds.com/blog/colocation\">excellent blog post</a> by Kent C. Dodds.</p>\n<p>The problem is that it's hard to implement colocation when using plain CSS, since CSS and JavaScript have to go in separate files, and your styles will apply globally regardless of where the <code>.css</code> file is located. On the other hand, if you're using CSS-in-JS, you can write your styles directly inside the React component that uses them! If done correctly, this greatly improves the maintainability of your application.</p>\n<blockquote>\n<p>Note: CSS Modules also allow you to colocate styles with components, though not in the same file.</p>\n</blockquote>\n<p><strong>3. You can use JavaScript variables in styles.</strong> CSS-in-JS enables you to reference JavaScript variables in your style rules, e.g.:</p>\n<pre><code>// colors.ts\nexport const colors = {\n  primary: '#0d6efd',\n  border: '#ddd',\n  /* ... */\n};\n\n// MyComponent.tsx\nfunction MyComponent({ fontSize }) {\n  return (\n    &lt;p\n      css={{\n        color: colors.primary,\n        fontSize,\n        border: `1px solid ${colors.border}`,\n      }}\n    &gt;\n      ...\n    &lt;/p&gt;\n  );\n}\n</code></pre>\n<p>As this example shows, you can use both JavaScript constants (e.g. <code>colors</code>) and React props / state (e.g. <code>fontSize</code>) in CSS-in-JS styles. The ability to use JavaScript constants in styles reduces duplication in some cases, since the same constant does not have to be defined as both a CSS variable and a JavaScript constant. The ability to use props &amp; state allows you to create components with highly-customizable styles, without using inline styles. (Inline styles are not ideal for performance when the same styles are applied to many elements.)</p>\n<h3>The Neutral</h3>\n<p><strong>1. It's the hot new technology.</strong> Many web developers, myself included, are quick to adopt the hottest new trends in the JavaScript community. Part of this is rationale, since in many cases, new libraries and frameworks have proven to be massive improvements over their predecessors (just think about how much React enhances productivity over earlier libraries like jQuery). On the other hand, the other part of our obsession with shiny new tools is just that — an obsession. We're afraid of missing out on the next big thing, and we might overlook real drawbacks when deciding to adopt a new library or framework. I think this has certainly been a factor in the widespread adoption of CSS-in-JS — at least it was for me.</p>\n<h3>The Bad</h3>\n<p><strong>1. CSS-in-JS adds runtime overhead.</strong> When your components render, the CSS-in-JS library must &quot;serialize&quot; your styles into plain CSS that can be inserted into the document. It's clear that this takes up extra CPU cycles, but is it enough to have a noticeable impact on the performance of your application? <strong>We'll investigate this question in depth in the next section.</strong></p>\n<p><strong>2. CSS-in-JS increases your bundle size.</strong> This is an obvious one — each user who visits your site now has to download the JavaScript for the CSS-in-JS library. Emotion is <a href=\"https://bundlephobia.com/package/@emotion/react@11.10.4\">7.9 kB</a> minzipped and styled-components is <a href=\"https://bundlephobia.com/package/styled-components@5.3.6\">12.7 kB</a>. So neither library is huge, but it all adds up. (<code>react</code> + <code>react-dom</code> is 44.5 kB for comparison.)</p>\n<p><strong>3. CSS-in-JS clutters the React DevTools.</strong> For each element that uses the <code>css</code> prop, Emotion will render <code>&lt;EmotionCssPropInternal&gt;</code> and <code>&lt;Insertion&gt;</code> components. If you are using the <code>css</code> prop on many elements, Emotion's internal components can really clutter up the React DevTools, as seen here:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yQZly1Om--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uh0gzxizoja69rh5ssm.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--yQZly1Om--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8uh0gzxizoja69rh5ssm.png\" alt=\"The React DevTools displaying many internal Emotion components\"></a></p>\n<h3>The Ugly</h3>\n<p><strong>1. Frequently inserting CSS rules forces the browser to do a lot of extra work.</strong> <a href=\"https://github.com/sebmarkbage\">Sebastian Markbåge</a>, member of the React core team and the original designer of React Hooks, wrote an <a href=\"https://github.com/reactwg/react-18/discussions/110\">extremely informative discussion</a> in the React 18 working group about how CSS-in-JS libraries would need to change to work with React 18, and about the future of runtime CSS-in-JS in general. In particular, he says:</p>\n<blockquote>\n<p>In concurrent rendering, React can yield to the browser between renders. If you insert a new rule in a component, then React yields, the browser then have to see if those rules would apply to the existing tree. So it recalculates the style rules. Then React renders the next component, and then that component discovers a new rule and it happens again.</p>\n<p><strong>This effectively causes a recalculation of all CSS rules against all DOM nodes every frame while React is rendering.</strong> This is VERY slow.</p>\n</blockquote>\n<p><strong>Update 2022-10-25:</strong> This quote from Sebastian is specifically referring to performance in React Concurrent Mode, <strong>without</strong> <code>useInsertionEffect</code>. I recommend reading the full discussion if you want an in-depth understanding of this. Thanks to Dan Abramov for <a href=\"https://twitter.com/dan_abramov/status/1584838817982590976\">pointing out</a> this inaccuracy on Twitter.</p>\n<p>The worst thing about this problem is that it's not a fixable issue (within the context of runtime CSS-in-JS). Runtime CSS-in-JS libraries work by inserting new style rules when components render, and this is bad for performance on a fundamental level.</p>\n<p><strong>2. With CSS-in-JS, there's a lot more that can go wrong, especially when using SSR and/or component libraries.</strong> In the Emotion GitHub repository, we receive <em>tons</em> of issues that go like this:</p>\n<blockquote>\n<p>I'm using Emotion with server-side rendering and MUI/Mantine/(another Emotion-powered component library) and it's not working because...</p>\n</blockquote>\n<p>While the root cause varies from issue to issue, there are some common themes:</p>\n<ul>\n<li>Multiple instances of Emotion get loaded at once. This can cause problems even if the multiple instances are all the same version of Emotion. <a href=\"https://github.com/emotion-js/emotion/issues/2639\">(Example issue)</a></li>\n<li>Component libraries often do not give you full control over the order in which styles are inserted. <a href=\"https://github.com/emotion-js/emotion/issues/2803\">(Example issue)</a></li>\n<li>Emotion's SSR support works differently between React 17 and React 18. This was necessary for compatibility with React 18's streaming SSR. <a href=\"https://github.com/emotion-js/emotion/issues/2725\">(Example issue)</a></li>\n</ul>\n<p>And believe me, these sources of complexity are just the tip of the iceberg. (If you're feeling brave, take a look at the <a href=\"https://github.com/emotion-js/emotion/blob/8a163746f0de5c6a43052db37f14c36d703be7b9/packages/styled/types/base.d.ts\">TypeScript definitions for <code>@emotion/styled</code></a>.)</p>\n<h2>Performance Deep Dive</h2>\n<p>At this point, it's clear that there are both significant pros and significant cons to runtime CSS-in-JS. To understand why our team is moving away from the technology, we need to explore the real-world performance impact of CSS-in-JS.</p>\n<p>This section focuses on the performance impact of Emotion, <strong>as it was used in the Spot codebase.</strong> As such, it would be a mistake to assume that the performance numbers presented below apply to your codebase as well — there are many ways to use Emotion, and each of these has its own performance characteristics.</p>\n<h3>Serialization Inside of Render vs. Outside of Render</h3>\n<p><em>Style serialization</em> refers to the process by which Emotion takes your CSS string or object styles and converts them to a plain CSS string that can be inserted into the document. Emotion also computes a hash of the plain CSS during serialization — this hash is what you see in the generated class names, e.g. <code>css-15nl2r3</code>.</p>\n<p>While I have not measured this, I believe one of the most significant factors in how Emotion performs is whether style serialization is performed inside or outside of the React render cycle.</p>\n<p>The examples in the Emotion docs perform serialization inside render, like this:</p>\n<pre><code>function MyComponent() {\n  return (\n    &lt;div\n      css={{\n        backgroundColor: 'blue',\n        width: 100,\n        height: 100,\n      }}\n    /&gt;\n  );\n}\n</code></pre>\n<p>Every time <code>MyComponent</code> renders, the object styles are serialized again. If <code>MyComponent</code> renders frequently (e.g. on every keystroke), the repeated serialization may have a high performance cost.</p>\n<p>A more performant approach is to move the styles outside of the component, so that serialization happens one time when the module loads, instead of on each render. You can do this with the <code>css</code> function from <code>@emotion/react</code>:</p>\n<pre><code>const myCss = css({\n  backgroundColor: 'blue',\n  width: 100,\n  height: 100,\n});\n\nfunction MyComponent() {\n  return &lt;div css={myCss} /&gt;;\n}\n</code></pre>\n<p>Of course, this prevents you from accessing props in your styles, so you are missing out on one of the main selling points of CSS-in-JS.</p>\n<p><strong>At Spot, we performed style serialization in render, so the following performance analysis will focus on this case.</strong></p>\n<h3>Benchmarking the Member Browser</h3>\n<p>It's finally time to make things concrete by profiling a real component from Spot. We'll be using the Member Browser, a fairly simple list view that shows you all of the users in your team. Virtually all of the Member Browser's styles are using Emotion, specifically the <code>css</code> prop.</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OKBdkNCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ds504qgf3ni0mjkujyu.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--OKBdkNCP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ds504qgf3ni0mjkujyu.png\" alt=\"The Member Browser in Spot\"></a></p>\n<p>For the test,</p>\n<ul>\n<li>The Member Browser will display 20 users,</li>\n<li>The <code>React.memo</code> around the list items will be removed, and</li>\n<li>We'll force the top-most <code>&lt;BrowseMembers&gt;</code> component to render each second, and record the times for the first 10 renders.</li>\n<li>React Strict Mode is off. (It effectively doubles the render times you see in the profiler.)</li>\n</ul>\n<p>I profiled the page using the React DevTools and got <strong>54.3 ms</strong> as the average of the first 10 render times.</p>\n<p>My personal rule of thumb is that a React component should take 16 ms or less to render, since 1 frame at 60 frames per second is 16.67 ms. The Member Browser is currently over 3 times this figure, so it's a pretty heavyweight component.</p>\n<p>This test was performed on an <strong>M1 Max</strong> CPU which is WAY faster than what the average user will have. The 54.3 ms render time that I got could easily be <strong>200 ms</strong> on a less powerful machine.</p>\n<h3>Analyzing the Flamegraph</h3>\n<p>Here's the flamegraph for a <strong>single list item</strong> from the above test:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3F7yQooV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8o8ubckz1qrn9753pp0.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--3F7yQooV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b8o8ubckz1qrn9753pp0.png\" alt=\"Performance flamegraph of the BrowseMembersItem component\"></a></p>\n<p>As you can see, there are a huge number of <code>&lt;Box&gt;</code> and <code>&lt;Flex&gt;</code> components being rendered — these are our &quot;style primitives&quot; which use the <code>css</code> prop. While each <code>&lt;Box&gt;</code> only takes 0.1 – 0.2 ms to render, this adds up because the total number of <code>&lt;Box&gt;</code> components is massive.</p>\n<h3>Benchmarking the Member Browser, without Emotion</h3>\n<p>To see how much of this expensive render was due to Emotion, I rewrote the Member Browser styles using Sass Modules instead of Emotion. (Sass Modules are compiled to plain CSS at build time, so there is virtually no performance penalty to using them.)</p>\n<p>I repeated the same test described above and got <strong>27.7 ms</strong> as the average of the first 10 renders. That's a <strong>48% decrease</strong> from the original time!</p>\n<p>So, that's the reason we are breaking up with CSS-in-JS: the runtime performance cost is simply too high.</p>\n<p>To repeat my disclaimer from above: this result only directly applies to the Spot codebase and how we were using Emotion. If your codebase is using Emotion in a more performant way (e.g. style serialization outside of render), you will likely see a much smaller benefit after removing CSS-in-JS from the equation.</p>\n<p>Here is the raw data for those who are curious:</p>\n<p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ojqusqLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyygzdyyhng3yzzuq95e.png\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--ojqusqLA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uyygzdyyhng3yzzuq95e.png\" alt=\"Spreadsheet showing render times between Emotion and non-Emotion Member Browser\"></a></p>\n<h2>Our New Styling System</h2>\n<p>After we made up our minds to switch away from CSS-in-JS, the obvious question is: what should we be using instead? Ideally, we want a styling system that has performance similar to that of plain CSS while keeping as many of the benefits of CSS-in-JS as possible. Here are the primary benefits of CSS-in-JS that I described in the section titled &quot;The Good&quot;:</p>\n<ol>\n<li>Styles are locally-scoped.</li>\n<li>Styles are colocated with the components they apply to.</li>\n<li>You can use JavaScript variables in styles.</li>\n</ol>\n<p>If you paid close attention to that section, you'll remember that I said that CSS Modules also provide locally-scoped styles and colocation. And CSS Modules compile to plain CSS files, so there is no runtime performance cost to using them.</p>\n<p>The main downside to CSS Modules in my mind is that, at end of the day, they are still plain CSS — and plain CSS is lacking features that improve DX and reduce code duplication. While <a href=\"https://developer.chrome.com/blog/help-css-nesting/\">nested selectors</a> are coming to CSS, they aren't here yet, and this feature is a huge quality of life boost for us.</p>\n<p>Fortunately, there is an easy solution to this problem — Sass Modules, which are simply CSS Modules written in <a href=\"https://sass-lang.com/\">Sass</a>. You get the locally-scoped styles of CSS Modules AND the powerful build-time features of Sass, with essentially no runtime cost. This is why Sass Modules will be our general purpose styling solution going forward.</p>\n<blockquote>\n<p>Side note: With Sass Modules, you lose benefit 3 of CSS-in-JS (the ability to use JavaScript variables in styles). Though, you can use an <code>:export</code> block in your Sass file to make constants from the Sass code available to JavaScript. This isn't as convenient, but it keeps things DRY.</p>\n</blockquote>\n<h3>Utility Classes</h3>\n<p>One concern the team had about switching from Emotion to Sass Modules is that it would be less convenient to apply extremely common styles, like <code>display: flex</code>. Before, we would write:</p>\n<pre><code>&lt;FlexH alignItems=&quot;center&quot;&gt;...&lt;/FlexH&gt;\n</code></pre>\n<p>To do this using only Sass Modules, we would have to open the <code>.module.scss</code> file and create a class that applies the styles <code>display: flex</code> and <code>align-items: center</code>. It's not the end of the world, but it's definitely less convenient.</p>\n<p>To improve the DX around this, we decided to bring in a utility class system. If you aren't familiar with utility classes, they are CSS classes that set a single CSS property on the element. Usually, you will combine multiple utility classes to get the desired styles. For the example above, you would write something like this:</p>\n<pre><code>&lt;div className=&quot;d-flex align-items-center&quot;&gt;...&lt;/div&gt;\n</code></pre>\n<p><a href=\"https://getbootstrap.com/\">Bootstrap</a> and <a href=\"https://tailwindcss.com/\">Tailwind</a> are the most popular CSS frameworks that offer utility classes. These libraries have put a lot of design effort into their utility systems, so it made the most sense to adopt one of them instead of rolling our own. I had already been using Bootstrap for years, so we went with Bootstrap. While you can bring in the Bootstrap utility classes as a pre-built CSS file, we needed to customize the classes to fit our existing styling system, so I copied the relevant parts of the Bootstrap source code into our project.</p>\n<p>We've been using Sass Modules and utility classes for new components for several weeks now and are quite happy with it. The DX is similar to that of Emotion, and the runtime performance is vastly superior.</p>\n<blockquote>\n<p>Side note: We're also using the <a href=\"https://www.npmjs.com/package/typed-scss-modules\">typed-scss-modules</a> package to generate TypeScript definitions for our Sass Modules. Perhaps the largest benefit of this is that it allowed us to define a <code>utils()</code> helper function that works like <a href=\"https://www.npmjs.com/package/classnames\">classnames</a>, except it only accepts valid utility class names as arguments.</p>\n</blockquote>\n<h3>A Note about Compile-Time CSS-in-JS</h3>\n<p>This article focused on runtime CSS-in-JS libraries like Emotion and styled-components. Recently, we've seen an increasing number of CSS-in-JS libraries that convert your styles to plain CSS at compile time. These include:</p>\n<ul>\n<li><a href=\"https://compiledcssinjs.com/\">Compiled</a></li>\n<li><a href=\"https://vanilla-extract.style/\">Vanilla Extract</a></li>\n<li><a href=\"https://linaria.dev/\">Linaria</a></li>\n</ul>\n<p>These libraries purport to provide a similar benefits to runtime CSS-in-JS, without the performance cost.</p>\n<p>While I have not used any compile-time CSS-in-JS libraries myself, I still think they have drawbacks when compared with Sass Modules. Here are the drawbacks I saw when looking at Compiled in particular:</p>\n<ul>\n<li>Styles are still inserted when a component mounts for the first time, which forces the browser to recalculate the styles on every DOM node. (This drawback was discussed in the section title &quot;The Ugly&quot;.)</li>\n<li>Dynamic styles like the <code>color</code> prop in <a href=\"https://compiledcssinjs.com/#speed-up-your-styles\">this example</a> cannot be extracted at build time, so Compiled adds the value as a CSS variable using the <code>style</code> prop (a.k.a. inline styles). Inline styles are known to cause suboptimal performance when applied many elements.</li>\n<li>The library still inserts boilerplate components into your React tree as shown <a href=\"https://compiledcssinjs.com/#speed-up-your-styles\">here</a>. This will clutter up the React DevTools just like runtime CSS-in-JS.</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Thanks for reading this deep dive into runtime CSS-in-JS. Like any technology, it has its pros and cons. Ultimately, it's up to you as a developer to evaluate these pros and cons and then make an informed decision about whether the technology is right for your use case. For us at Spot, the runtime performance cost of Emotion far outweighed the DX benefits, especially when you consider that the alternative of Sass Modules + utility classes still has a good DX while providing vastly superior performance.</p>\n<h2>This article is reprinted from</h2>\n<p><strong><a href=\"https://link.zhihu.com/?target=https%3A//dev.to/srmagura/why-were-breaking-up-wiht-css-in-js-4g9b\">Why We're Breaking Up with CSS-in-JS</a></strong></p>\n<p>Some good Chinese articles： <strong><a href=\"https://zhuanlan.zhihu.com/p/583155810\">精读《我们为何弃用 css-in-js》</a></strong></p>\n",
            "url": "https://xubh.top/posts/whybreakingccinjs",
            "title": "Why  Breaking Up with CSS-in-JS",
            "summary": "Why We're Breaking Up with CSS-in-JS",
            "date_modified": "2022-11-15T08:00:00.000Z",
            "author": {
                "name": "Bohua Xu",
                "url": "https://xubh.top"
            }
        },
        {
            "content_html": "<p>[[toc]]</p>\n<h2>useContext</h2>\n<pre><code class=\"language-js\">const CountContext = React.createContext()\n// CountProvider和useCount写在外部导入\nfunction CountProvider(props) {\n  const [count, setCount] = React.useState(0)\n  const value = [count, setCount]\n  return &lt;CountContext.Provider value={value} {...props} /&gt;\n}\n\nfunction useCount() { // 封装useCount\n  const context = React.useContext(CountContext)\n  if (!context)\n    throw new Error('useCount must be used within a CountProvider')\n\n  return context\n}\n\nfunction CountDisplay() {\n  const [count] = useCount()\n  return &lt;div&gt;{`The current count is ${count}`}&lt;/div&gt;\n}\n\nfunction Counter() {\n  const [, setCount] = useCount()\n  const increment = () =&gt; setCount(c =&gt; c + 1)\n  return &lt;button onClick={increment}&gt;Increment count&lt;/button&gt;\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;CountProvider&gt;\n        &lt;CountDisplay /&gt;\n        &lt;Counter /&gt;\n      &lt;/CountProvider&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n<pre><code class=\"language-js\">const CountContext = React.createContext()\n\nfunction CountProvider(props) {\n  const [count, setCount] = React.useState(0)\n  const value = [count, setCount]\n  // const value = React.useState(0)\n  return &lt;CountContext.Provider value={value} {...props} /&gt;\n}\n\nfunction CountDisplay() {\n  const [count] = React.useContext(CountContext)\n  return &lt;div&gt;{`The current count is ${count}`}&lt;/div&gt;\n}\n\nfunction Counter() {\n  const [, setCount] = React.useContext(CountContext)\n  const increment = () =&gt; setCount(c =&gt; c + 1)\n  return &lt;button onClick={increment}&gt;Increment count&lt;/button&gt;\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;CountProvider&gt;\n        &lt;CountDisplay /&gt;\n        &lt;Counter /&gt;\n      &lt;/CountProvider&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n<h2>配合useReducer使用</h2>\n<p>CounterCotext.jsx</p>\n<pre><code class=\"language-js\">const CounterContext = React.createContext(null)\nexport default CounterContext\n</code></pre>\n<p>CounterReducer.jsx</p>\n<pre><code class=\"language-js\">const CounterReducer = (state,action)=&gt;{\n    switch (action.type){\n        case 'counter/increment':\n         return state + 1;\n        case 'counter/decrement':\n         return state - 1;\n        default:\n         return state;\n    }\n}\nexport default CounterReducer\n</code></pre>\n<p>App.jsx</p>\n<pre><code class=\"language-js\">import  CounterContext\nimport  CounterReducer\n\nfunction App() {\n  const [state,dispacth] = React.useReducer(CounterReducer,0)\n    \n  return (\n    &lt;div&gt;\n      &lt;CounterContext.Provider value={{state,dispath}}&gt;\n        &lt;Counter /&gt;\n      &lt;/CounterContext.Provider&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n<p>Counter.jsx</p>\n<pre><code class=\"language-js\">import  useContext\n\nconst Counter = () =&gt;{\n const count = React.useContext(CounterContext)\n const dispatch = count.dispatch\n    \n return (\n    &lt;div&gt;\n      &lt;button onClick={()=&gt;{dispatch({type:'counter/increment'})}}&gt;&lt;/button&gt;\n      &lt;span&gt;{count.state}&lt;/span&gt;\n      &lt;button onClick={()=&gt;{dispatch({type:'counter/decrement'})}}&gt;&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n",
            "url": "https://xubh.top/posts/useContextuseReducer",
            "title": "useContext -useReducer",
            "summary": "Prefer object destructure or array? Can we support both?",
            "image": "https://xubh.top/images/destructuring.png",
            "date_modified": "2021-12-21T16:00:00.000Z",
            "author": {
                "name": "Bohua Xu",
                "url": "https://xubh.top"
            }
        },
        {
            "content_html": "<p>[[toc]]</p>\n<!-- > Slides: [PDF](https://antfu.me/talks/2022-01-26) | [SPA](https://talks.antfu.me/2022/vue-nation)\n>\n> Recording: [YouTube](https://www.youtube.com/watch?v=CW9uTys0li0)\n>\n> Made with <Slidev class=\"inline\"/>  [**Slidev**](https://github.com/slidevjs/slidev) - presentation slides for developers. -->\n<h1>可选链操作符（?.）</h1>\n<pre><code class=\"language-js\">// const CallALl = (...fns) =&gt;{\n//   return (...args) =&gt; {\n//     fns.forEach(fn=&gt;\n//      fn&amp;&amp;fn(args)\n//     )\n//   }\n// }\nconst callAll = (...fns) =&gt; (...args) =&gt; fns.forEach(fn =&gt; fn?.(...args))\n//最近的使用，用来传递多个函数来调用,的简写的一个CallAll函数\nconst toggle = () =&gt; console.log('5')\nconst hh = (aet,hhh) =&gt;{\n  console.log(aet,hhh)\n}\n\nconst jh = CallALl(hh, toggle)\n// jh(444,5555)\n// const callAll = (...fns) =&gt; (...args) =&gt; fns.forEach(fn =&gt; fn?.(...args))\n// const hh = (hhh) =&gt;{\n//   console.log(hhh)\n// }\n// console.log(hh?.(888))\nconst s = {\n  x:1\n}\ns.x=0\nconsole.log(s?.x)\nconsole.log(s.x)\n</code></pre>\n<p><strong>可选链</strong>操作符 ( <strong><code>?.</code></strong> ) 允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为空 (<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Nullish\">nullish</a> ) (<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/null\"><code>null</code></a> 或者 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</p>\n<p>当尝试访问可能不存在的对象属性时，可选链操作符将会使表达式更短、更简明。在探索一个对象的内容时，如果不能确定哪些属性必定存在，可选链操作符也是很有帮助的。</p>\n<h2><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%B0%9D%E8%AF%95%E4%B8%80%E4%B8%8B\">尝试一下</a></h2>\n<iframe class=\"interactive is-taller-height\" height=\"200\" src=\"https://interactive-examples.mdn.mozilla.net/pages/js/expressions-optionalchainingoperator.html\" title=\"MDN Web Docs Interactive Example\" loading=\"lazy\" data-readystate=\"complete\" style=\"box-sizing: border-box; border: 0px; max-width: 100%; width: 723.636px; background-color: var(--background-secondary); border-radius: var(--elem-radius); color: var(--text-primary); height: 654px; margin: 1rem 0px; padding: 0px;\"></iframe>\n<h2><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E8%AF%AD%E6%B3%95\">语法</a></h2>\n<pre><code class=\"language-js\">obj?.prop\nobj?.[expr]\narr?.[index]\nfunc?.(args)\n</code></pre>\n<h2><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E6%8F%8F%E8%BF%B0\">描述</a></h2>\n<p>通过连接的对象的引用或函数可能是 <code>undefined</code> 或 <code>null</code> 时，可选链操作符提供了一种方法来简化被连接对象的值访问。</p>\n<p>比如，思考一个存在嵌套结构的对象 <code>obj</code>。不使用可选链的话，查找一个深度嵌套的子属性时，需要验证之间的引用，例如：</p>\n<pre><code class=\"language-js\">let nestedProp = obj.first &amp;&amp; obj.first.second;\n</code></pre>\n<p>为了避免报错，在访问<code>obj.first.second</code>之前，要保证 <code>obj.first</code> 的值既不是 <code>null</code>，也不是 <code>undefined</code>。如果只是直接访问 <code>obj.first.second</code>，而不对 <code>obj.first</code> 进行校验，则有可能抛出错误。</p>\n<p>有了可选链操作符（<code>?.</code>），在访问 <code>obj.first.second</code> 之前，不再需要明确地校验 <code>obj.first</code> 的状态，再并用短路计算获取最终结果：</p>\n<pre><code class=\"language-js\">let nestedProp = obj.first?.second;\n</code></pre>\n<p>通过使用 <code>?.</code> 操作符取代 <code>.</code> 操作符，JavaScript 会在尝试访问 <code>obj.first.second</code> 之前，先隐式地检查并确定 <code>obj.first</code> 既不是 <code>null</code> 也不是 <code>undefined</code>。如果<code>obj.first</code> 是 <code>null</code> 或者 <code>undefined</code>，表达式将会短路计算直接返回 <code>undefined</code>。</p>\n<p>这等价于以下表达式，但实际上没有创建临时变量：</p>\n<pre><code class=\"language-js\">let temp = obj.first;\nlet nestedProp = ((temp === null || temp === undefined) ? undefined : temp.second);\n</code></pre>\n<p>Copy to Clipboard</p>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E4%B8%8E%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\">可选链与函数调用</a></h3>\n<p>当尝试调用一个可能不存在的方法时也可以使用可选链。这将是很有帮助的，比如，当使用一个 API 的方法可能不可用时，要么因为实现的版本问题要么因为当前用户的设备不支持该功能。</p>\n<p>函数调用时如果被调用的方法不存在，使用可选链可以使表达式自动返回<code>undefined</code>而不是抛出一个异常。</p>\n<pre><code class=\"language-js\">let result = someInterface.customMethod?.();\n</code></pre>\n<p><strong>备注：</strong> 如果存在一个属性名且不是函数，使用 <code>?.</code> 仍然会产生一个 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> 异常 (<code>x.y is not a function</code>).</p>\n<p><strong>备注：</strong> 如果 <code>someInterface</code> 自身是 <code>null</code> 或者 <code>undefined</code> ，异常 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> 仍会被抛出 <code>someInterface is null</code> 如果你希望允许 <code>someInterface</code> 也为 <code>null</code> 或者 <code>undefined</code> ，那么你需要像这样写 <code>someInterface?.customMethod?.()</code></p>\n<h4>处理可选的回调函数或者事件处理器</h4>\n<p>如果使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">解构赋值</a>来解构的一个对象的回调函数或 fetch 方法，你可能得到不能当做函数直接调用的不存在的值，除非你已经校验了他们的存在性。使用<code>?.</code>的你可以忽略这些额外的校验：</p>\n<pre><code class=\"language-js\">//  ES2019 的写法\nfunction doSomething(onContent, onError) {\n  try {\n    // ... do something with the data\n  }\n  catch (err) {\n    if (onError) { // 校验 onError 是否真的存在\n      onError(err.message);\n    }\n  }\n}\n</code></pre>\n<pre><code class=\"language-js\">// 使用可选链进行函数调用\nfunction doSomething(onContent, onError) {\n  try {\n   // ... do something with the data\n  }\n  catch (err) {\n    onError?.(err.message); // 如果 onError 是 undefined 也不会有异常\n  }\n}\n</code></pre>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F\">可选链和表达式</a></h3>\n<p>当使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Property_Accessors#%E6%96%B9%E6%8B%AC%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%B3%95\">方括号与属性名</a>的形式来访问属性时，你也可以使用可选链操作符：</p>\n<pre><code class=\"language-js\">let nestedProp = obj?.['prop' + 'Name'];\n</code></pre>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E4%B8%8D%E8%83%BD%E7%94%A8%E4%BA%8E%E8%B5%8B%E5%80%BC\">可选链不能用于赋值</a></h3>\n<pre><code class=\"language-js\">let object = {};\nobject?.property = 1; // Uncaught SyntaxError: Invalid left-hand side in assignment\n</code></pre>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%8F%AF%E9%80%89%E9%93%BE%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0\">可选链访问数组元素</a></h3>\n<pre><code class=\"language-js\">let arrayItem = arr?.[42];\n</code></pre>\n<h2><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E4%BE%8B%E5%AD%90\">例子</a></h2>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E5%9F%BA%E6%9C%AC%E4%BE%8B%E5%AD%90\">基本例子</a></h3>\n<p>如下的例子在一个不含 <code>bar</code> 成员的 Map 中查找 <code>bar</code> 成员的 <code>name</code> 属性，因此结果是 <code>undefined</code>。</p>\n<pre><code class=\"language-js\">let myMap = new Map();\nmyMap.set(&quot;foo&quot;, {name: &quot;baz&quot;, desc: &quot;inga&quot;});\n\nlet nameBar = myMap.get(&quot;bar&quot;)?.name;\n</code></pre>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E7%9F%AD%E8%B7%AF%E8%AE%A1%E7%AE%97\">短路计算</a></h3>\n<p>当在表达式中使用可选链时，如果左操作数是 <code>null</code> 或 <code>undefined</code>，表达式将不会被计算，例如：</p>\n<pre><code class=\"language-js\">let potentiallyNullObj = null;\nlet x = 0;\nlet prop = potentiallyNullObj?.[x++];\n\nconsole.log(x); // x 将不会被递增，依旧输出 0\n</code></pre>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E8%BF%9E%E7%94%A8%E5%8F%AF%E9%80%89%E9%93%BE%E6%93%8D%E4%BD%9C%E7%AC%A6\">连用可选链操作符</a></h3>\n<p>可以连续使用可选链读取多层嵌套结构：</p>\n<pre><code class=\"language-js\">let customer = {\n  name: &quot;Carl&quot;,\n  details: {\n    age: 82,\n    location: &quot;Paradise Falls&quot; // details 的 address 属性未有定义\n  }\n};\nlet customerCity = customer.details?.address?.city;\n\n// … 可选链也可以和函数调用一起使用\nlet duration = vacations.trip?.getTime?.();\n</code></pre>\n<h3><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining#%E4%BD%BF%E7%94%A8%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E7%AC%A6\">使用空值合并操作符</a></h3>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\"><code>空值合并操作符</code></a>可以在使用可选链时设置一个默认值：</p>\n<pre><code class=\"language-js\">let customer = {\n  name: &quot;Carl&quot;,\n  details: { age: 82 }\n};\nlet customerCity = customer?.city ?? &quot;暗之城&quot;;\nconsole.log(customerCity); // “暗之城”\n</code></pre>\n<h2>MDN</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining</a></p>\n",
            "url": "https://xubh.top/posts/jottingsl",
            "title": "?.",
            "summary": "Compound Components",
            "date_modified": "2021-08-26T08:00:00.000Z",
            "author": {
                "name": "Bohua Xu",
                "url": "https://xubh.top"
            }
        }
    ]
}